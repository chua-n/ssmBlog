/*
 Navicat Premium Data Transfer

 Source Server         : local
 Source Server Type    : MySQL
 Source Server Version : 80025
 Source Host           : localhost:3306
 Source Schema         : ssmblog

 Target Server Type    : MySQL
 Target Server Version : 80025
 File Encoding         : 65001

 Date: 15/06/2021 13:45:59
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `article_id` int NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `article_user_id` int UNSIGNED NULL DEFAULT NULL COMMENT '用户ID',
  `article_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `article_content` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '内容',
  `article_view_count` int NULL DEFAULT 0 COMMENT '访问量',
  `article_comment_count` int NULL DEFAULT 0 COMMENT '评论数',
  `article_like_count` int NULL DEFAULT 0 COMMENT '点赞数',
  `article_is_comment` int UNSIGNED NULL DEFAULT NULL COMMENT '是否允许评论',
  `article_status` int UNSIGNED NULL DEFAULT 1 COMMENT '状态',
  `article_order` int UNSIGNED NULL DEFAULT NULL COMMENT '排序值',
  `article_update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `article_create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `article_summary` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '摘要',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 54 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (50, 1, '读书笔记：《历史学是什么》', '<p style=\"text-align: justify;\">葛剑雄，周筱赟著：《历史学是什么》，北京大学出版社，2015 年 9 月第 1 版。</p><blockquote style=\"text-align: justify;\"><p>作者语：大部分的青少年，包括中小学生、非历史学及相关专业的大学生，他们学历史只是增加知识、满足兴趣、陶冶情操，既没有必要，也不应该让他们把时间花在非常琐碎的历史细节和有重大争议问题的讨论上，只要告诉他们一些基本史实或学术界公认的观点就可以了。</p><p>作者语：一位历史老师，不可能，也没有必要把历史研究的全部内容传授给学生，尤其是目前尚有很大争议的问题，对缺乏分析判断能力的中小学生而言，反而容易引起思想混乱。</p></blockquote><p style=\"text-align: justify;\">作者对历史的划分：</p><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">时间系列</th><th style=\"text-align: center;\">空间系列</th><th style=\"text-align: center;\">内容系列</th><th style=\"text-align: center;\">人物系列</th><th style=\"text-align: center;\">另类历史</th></tr></thead><tbody><tr><td style=\"text-align: center;\">通史、断代史、阶段史…</td><td style=\"text-align: center;\">世界史、国别史、地区史…</td><td style=\"text-align: center;\">综合史（总史）、专门史、资料汇编、年表、历史地图…</td><td style=\"text-align: center;\">个人、血缘群体、地域群体、专门群体…</td><td style=\"text-align: center;\">文学、艺术、宗教、神话、音乐、戏剧、影响、民间故事..</td></tr></tbody></table></div></div><blockquote style=\"text-align: justify;\"><p>现在中国历史上第一部通史是司马迁的《史记》。</p></blockquote><h2 id=\"一、一些地域特色\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/#%E4%B8%80%E3%80%81%E4%B8%80%E4%BA%9B%E5%9C%B0%E5%9F%9F%E7%89%B9%E8%89%B2\" class=\"headerlink\" title=\"一、一些地域特色\"></a>一、一些地域特色</h2><ol style=\"text-align: justify;\"><li>杭州方言在整片吴方言区内，是一个非常典型的方言孤岛，仅分布于杭州市城区，范围极小，甚至一到城郊方言就大不相同。杭州方言在语音、词汇和语法等方面都有浓厚的北方官话色彩。<blockquote><p>如，杭州方言具有大量的“<span>儿尾词</span>”，这不同于北方的“<span>儿话音</span>”：儿话音附在前字字音末尾，与前字合成一个音，起卷舌作用，并非一个独立的音节，而杭州方言恰恰相反。之所以如此，是北宋末年宋室南渡，大批北方移民涌入临安（今杭州），受本地方言影响下的产物；另外民国成立后，原清政府驻军&nbsp;<em>旗下营</em>&nbsp;解散，大批旗人子弟也给杭州方言融入了北方官话的因素。</p></blockquote></li><li><span>蒙古褶</span>与<span>蒙古青</span>：蒙古人种由于最初生活在草原和半干旱地区，在眼睑上形成具有保护眼睛的眦褶的比例很高，人类学上称作蒙古褶，俗称双眼皮；大部分蒙古人种的初生婴儿臀部由于皮下色素沉积，出现青紫色斑，被认定是蒙古人种所特有的遗传特征，称为蒙古青。</li><li>现在的省区划分，基本上是继承明清的制度，在建省之初，必定是由于这片区域具有一些共同点。</li><li>以前一直把今天的江苏南部、浙江北部、上海市辖区合称为“<span>吴越</span>”。</li></ol><h2 id=\"二、关于年号纪年\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/#%E4%BA%8C%E3%80%81%E5%85%B3%E4%BA%8E%E5%B9%B4%E5%8F%B7%E7%BA%AA%E5%B9%B4\" class=\"headerlink\" title=\"二、关于年号纪年\"></a>二、关于<span>年号</span>纪年</h2><ol style=\"text-align: justify;\"><li>中国最早的纪年方式是干支纪年，即 10 个天干和 12 个地支排列组合，每 60 年为一个循环。以后增加了以帝王在位的年数纪年，从<span>元年</span>（一般为即位的次年）开始，逐年累计到去位。</li><li>最早的年号始于汉武帝元鼎元年（前 116），据说当时在汾水旁获得一只宝鼎，被认为是一种吉兆，因而设置<span>年号</span>，从此成为惯例。现在史书上所见汉代以前的年号，都是后来追加的。</li><li>如上所说，新皇帝继位后，一般都从第二年开始使用新的年号，但也有当年就改的，这种情况下一年便会出现两个年号，如果这两位皇帝在这一年还改过年号，那一年就会出现更多的年号了。</li><li>在明代以前，同一皇帝在位时往往不止一个年号，常会以顺应天象、应贺吉兆等理由而<span>改元</span>，有的皇帝改元异常频繁，如唐高宗李治在位的 34 年用过 14 个年号，武则天在位的 21 年间用了 17 个年号。而明清两朝，一位皇帝只用一个年号，所以一般就用年号来称为皇帝，如乾隆皇帝，反而不用他的庙号“高宗”、尊号“法天隆运至诚先觉体元立极敷文奋武钦明孝慈神至纯皇帝”（简称纯皇帝）和姓名爱新觉罗村•弘历。</li><li>皇帝、皇后（太后、太皇太后）的<span>尊号</span>、<span>徽号</span>、<span>庙号</span>、<span>谥号</span>虽然同属一人，但不同时间有不同的称呼，不能乱用或混用。皇帝生前可以有尊号和徽号，尊号还可以由简而繁、不断增加，但只有死后才会有谥号和庙号。<blockquote><p>帝、后有了尊号后，臣子会不断地给他们加颂扬褒美的词作为徽号，唐宋以后渐成惯例，到嘉庆时，大概觉得再加下去没完没了，就规定了制度，列朝皇帝已加到 24 字、皇帝已加到 16 字的便不再追加，所以其他皇帝都是 22 字或 20 字。由于这类尊号、徽号几乎用遍了颂词，每个皇帝大同小异，已是毫无意义的文字游戏，所以除了用在正式文书中外没有什么用处，就是当时人一般也都用简称，如慈禧太后尊号全称是“慈禧端佑康颐昭豫庄诚寿恭钦献崇熙皇太后”，一般仅称“慈禧太后”或“慈禧皇太后”，在她死前 16 字已经用满，颂词已用尽，所以死后就将尊号当作谥号。</p></blockquote></li><li>年号出现后，干支依然十分流行，所以往往年号与干支混合使用。特别是明清两代，有的年号持续时间很长，两者混用会更符合当时人们的习惯，如万历十五年（1587）可称万历丁亥，光绪二十六年（1900）可称光绪庚子。除了康熙在位长达 61 年，出现过两个壬寅（元年、六十一年）外，其他的号都不超过 60 年，所以不存在混淆的问题。</li><li>年号一般均为二字，但也有少数的多字年号。其中三字年号为王莽的“始建国”、梁武帝的“中大通”和“中大同”；四字年号略多一些，主要集中在唐宋两代，武则天一人就占了三个，“天册万岁”“万岁登封”“万岁通天”，宋太宗有“太平兴国”，宋真宗有“大中祥符”、宋徽宗有“建中靖国”等等。</li><li>年号用字和意义的选择都要符合吉利、赞颂、祈求、美好的要求，所以一些字和词被频繁使用，有的年号被用了不止一次。<blockquote><p>最多的是“太平”，八次；其次是“建武”，七次；再次是“中兴”“永平”“永兴”“永和”“建平”“建兴”，六次；“太安”“太和”“甘露”“永安”“永康”“建元”“建始”也都有五次。</p></blockquote></li><li>中国的农历并非单纯按照月亮的运行计算，而是一种阴阳混合历，即既按月相的盈亏决定每个朔望月的长度，又按太阳的视运行周期决定每个回归年的长度，并按年对月进行加闰调整。农历的正月初一最早可开始于公历的 1 月下旬，也可晚至公历的 2 月下旬。</li></ol><h2 id=\"三、血亲关系、地域\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/#%E4%B8%89%E3%80%81%E8%A1%80%E4%BA%B2%E5%85%B3%E7%B3%BB%E3%80%81%E5%9C%B0%E5%9F%9F\" class=\"headerlink\" title=\"三、血亲关系、地域\"></a>三、血亲关系、地域</h2><ol style=\"text-align: justify;\"><li><span>拟制血亲关系</span>：有一些特殊的家族群体并不是以真正的血缘关系维系的，而是通过人为的方法和程序模仿真正的血亲关系而制造出来的拟制血亲关系。在唐五代时期，这种拟制血亲关系相当普遍，成为一时的风尚。</li><li>唐五代割据军阀收养义子，数量据人。安禄山就有义子 8000 人，田承嗣有 3000 人，王建有 120 人，以此作为巩固势力、笼络人心的一种手段。</li><li>后唐明宗<span>李嗣</span>本是无姓的沙陀族部民，小名邈佶烈，因骁勇善战为唐末军阀&nbsp;<em>李克用</em>&nbsp;赏识而收为义子，赐姓名<span>李嗣源</span>，即帝位后又更名为<span>李亶</span>。</li><li>欧阳修在《新五代史-义儿传序》中感叹道：“世道衰，人伦坏，而亲疏之理反其常，干戈起于骨肉，异类合为父子。”</li><li><span>郡望</span>：该姓家族中最显赫一支的发祥地。古人传记或自述中的籍贯大多是祖籍，或者郡望，而未必是他真正的出生地。</li><li>秦汉以来在首都任职的官员和各地的行政长官多数不是本地人，有的离开原籍已不止一代，但除了某些特殊情况，他们一般不会改变自己原来的籍贯。东汉时出现了好几位籍贯是西北边郡的知名学者，但实际上除了个别人以外，他们都是在首都洛阳等地方居住或接受教育。明清时也有不少生长在京师的人物，籍贯却还是南方的祖籍，南方对他们的影响只是血统和家庭的传统，但北京对他们的影响却起决定性作用。</li><li>自魏晋<span>门阀制度</span>盛行以后，高门世族成为士人立命进身的基础，各姓人士无不标榜本族的郡望，王氏必称太原，谢氏必称陈郡，杨氏必称弘农，赵氏必称天水，等等。因此，已在京师任职数代的大族，必然还要以郡望所在为籍贯。<blockquote><p>像唐代的韩愈自称“昌黎韩愈”，其实他是河南河阳人（今河南孟州市），昌黎只是其郡望而已。而且，在这种制度影响下，一些人进身无门，不得不冒用他族的郡望，甚至伪造世系。这些人的籍贯就更与他们的出生地无关了。</p></blockquote></li><li>除了同一出生地之外，在同一地方活动，或者在同一地方结成某一个利益集团，这些群体可能也都是地域性的。例如，刘邦即帝位后建都洛阳，一方面固然是由于秦朝故都咸阳已完全被毁，另一方面也是由于洛阳比较靠近这批人的故乡，所以只有像张良这样具有长远战略眼光、又为刘邦所信用的谋士才能说服他迁都关中。唐代也有类似情况。</li><li>明清以来，朝野都喜欢用籍贯来称呼某个政治人物，如分宜相严嵩（江西分宜人）、李合肥（李鸿章）、张南皮（张之洞）、翁常熟（翁同龢)、袁项城（袁世凯），甚至连姓都不用，如项城即指袁世凯。</li></ol><h2 id=\"四、“中国与世界”\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/#%E5%9B%9B%E3%80%81%E2%80%9C%E4%B8%AD%E5%9B%BD%E4%B8%8E%E4%B8%96%E7%95%8C%E2%80%9D\" class=\"headerlink\" title=\"四、“中国与世界”\"></a>四、“中国与世界”</h2><ol style=\"text-align: justify;\"><li>有一些人借着弘扬中国文化的名义，把《周易》及阴阳学说抬高到了无以复加的地位，似乎成了集科学的大成，成了中国以至世界一切科学的源泉。尽管莱布尼茨从中国的八卦得到启发而发明二进制的故事已经不止一次被指出并非事实，而只国人一厢情愿的误解，事实不过是莱布尼茨发明二进制之后，从在中国传教的法国籍传教士处获得了宋代邵雍的六十四卦图，发现可以用他的二进制数学来解释，但不少人至今还在津津乐道，以此来证明《周易》的伟大。</li><li>作为中国四大发明之一的造纸术在阿拉伯世界的传播，靠的是怛(dá)罗斯战役的唐军俘虏。而意外地亲身游历了中亚、西亚并留下纪录的，竟也是俘虏之一的杜环。在大批西域“商胡”、阿拉伯“蕃客”来中原经商致富、定居繁衍的同时，唐朝人在境外的发展几乎是一片空白。</li><li>北方游牧民族是中原政权唯一存在的威胁，如匈奴、鲜卑、突厥、契丹、女真等，长城就是为了阻止这些民族的南下而修建并被后代不断增筑的。尽管他们曾经不止一次征服过中原，但由于这些民族整体上，特别在经济上、文化上落后于中原汉族，连这些民族本身也被消融于汉族的汪洋大海之中。</li><li>在西方历史上历经 1800 多年流散生涯，以强大的凝聚力固守本民族宗教文化传统而著称的犹太民族，其中的一支于北宋中叶进入开封定居，长期过着和平生活，得到汉族的平等对待，也逐渐放弃本民族的语言，开始学习儒家经典，参加科举考试，娶汉族女子为妻，最终失去保持本民族特征的心态，融合到了汉族之中。在 19 世纪初，开封犹太人中就已经没有专门的神职人员，无人能够阅读希伯来文经典了。这是见于记载的犹太民族被外族同化的唯一例子。</li><li>像林则徐这样的伟大人物，也相信洋人的腿关节不能弯曲，因此一度认为清朝军队只要以长竹竿为武器将他们拨翻在地，他们就会束手就擒了。</li></ol><h2 id=\"五、杂记\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E5%8E%86%E5%8F%B2%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/#%E4%BA%94%E3%80%81%E6%9D%82%E8%AE%B0\" class=\"headerlink\" title=\"五、杂记\"></a>五、杂记</h2><p><a id=\"more\" style=\"text-align: justify;\"></a><span style=\"text-align: justify;\"></span></p><ol style=\"text-align: justify;\"><li>秦朝至清朝鸦片战争前的这 2000 余年，中国的疆域在不断变化，但总的趋势是越来越扩大、稳定和巩固，最终形成了清朝统一后的极盛疆域，也为今天中国的领土奠定了基础。</li><li>明初朱元章虽然定都江宁（今南京），但也知道首都偏南、离北方军事要地太远的缺点，一直想迁都北方，先后考察过西安和开封。当西安因过于残破、交通不便被否决后，朱元璋将希望寄托在开封，却发现汴渠已无法恢复，原有河道太浅，无法解决大批粮食的运输，只得作罢。而明成祖之所以能迁都北京，南北大运河的存在是决定因素之一。<blockquote><p>但运河的自然地理条件也决定了它同样存在着的先天不足：由南到北要越过海拔 40 米左右的山东，而这一带恰恰是水量不足的地方，天气稍旱，就会出现运河与当地农业生产争水的现象，而为了确保运河的畅通，明清统治者都采取弃农保运的方针，往往连山泉的水都得引入运河，向北京运粮食的船队不过，周围的水源就绝不能动用。运河还得穿过黄河，而黄河又经常闹水灾，决口改道也多次发生。治黄和保运往往有矛盾，在这种情况下，为了保证运河的畅通，统治者宁可暂停黄河堵口和恢复故道的工作，或者听任水患延续。</p></blockquote></li><li>刘向的《列女传》中尽管也有不少后世所谓的“贞节烈女”，但“列”字在他那里的本意只是“诸”“众”之意，犹如《列仙传》《列国志》，是各类有影响的或值得记载的妇女的传记，只要才行高秀者均可收入。而到了后世，“列”字完成成了“烈”的通假字，专指“节烈”之意，贞节与否居了入选的唯一标准，《列女传》演变成了《“烈”女传》。尤其明清以后不计其数的续修《列女传》以及正史、方志中的《列女传》，千篇一律，无不如此。我们在阅读这类史料时必须注意，正因为贞节烈女太少，统治者才会大力提倡，这和鲁迅在《我们现在怎样做父亲》一文中说的：“历来都竭力表彰‘五世同堂’，便足见实际上同居的为难；拼命的劝孝，也足见事实上孝子的缺少。”都是一样的道理。</li><li>晚明以来，一方面是充斥于正史、方志中无数贞节烈女的事迹，另一方面，却涌现了大量以情欲为主题的市井小说，专以叙床第之事为能事，这正反映了晚明男女关系渐趋松弛，人性觉醒，世风为之一巨变。这与西方历史上的“文艺复兴”时代颇有类似之处，后者常为中国的历史著作倍加赞誉，而前者却被贬为“亡国之相”，不如何以厚此薄彼如此？</li><li>唐安史之乱爆发后，太监李辅国因拥立肃宗继位有功，被任命为兵部尚书，从此宦官掌军几乎成为惯例。由于十余万神策军（中央禁军）和大部分藩镇的兵权都掌握在太监手中，反而是皇帝一旦得罪了太监，即或囚或废，甚至连皇帝的性命也会难保。唐中后期几乎所有皇帝均为宦官拥立，顺宗、宪宗、敬宗、文宗都是由于试图打击太监势力而被杀。</li><li>元朝是蒙古族入主中原而建立的，实行民族歧视政策，将各民族分为四等：蒙古、色目、汉人、南人，从法律上明确规定前两类人在政治、经济上的优越地位。蒙古尚武轻文，建国后长期废止科举考试，汉族文人（特别是北方原金朝统治区的）丧失了进身之阶，地位一落千丈，几乎处于社会最底层，故有“九儒十丐”之说。他们看不到前途和希望，带着对社会的满腔怨恨投入杂剧创作当中，目前存世的元人杂剧，几乎全是汉人创作的。</li><li>《金瓶梅》一书最为前人诟病的是其中夹杂的大量性描写，被贬为“天下第一淫书”，其实这样的描写在当时却是一种风尚，文人士子并不以谈性为耻，鲁迅便说：“自方士进用以来，方药盛，妖心兴，而小说亦多神魔之谈，且每叙床第之事也。然《金瓶梅》作者能文，故虽间杂猥词，而其佳处自在。”</li><li>按照中国的历史传统，即使连皇帝本人，也是无权阅读当朝的<span>起居注</span>的。据说古代史官应该将皇帝的言行和活动随时记录下来，投入一个密封的容器，等皇帝死了，才能由专人打开，取了记录作为修史的根据。史官的记载不是给皇帝看的，而是留给后人修史用的。<blockquote><p>像宋太宗这样的人物，在历史上算得上开明的君主，他对历史毕竟还多少怀有一定的畏惧，不时检点自己的言行，尊重史官的独立性。面历史上另一些暴君、权臣，则完全依靠政治强权来迫使历史符合自己的意愿。</p><p>前秦国主<span>苻坚</span>，其生母苟太后与将军李威有私，苻坚为掩盖这段宫廷丑闻，不顾制度调阅了起居注和有关簿记，其中果然有苟太后与李威隐秘关系的记录，他恼羞成怒，将这些原始材料全部焚毁。而执笔史官均已去世，事情才就此作罢。</p><p>东晋孙盛所作《晋阳秋》一书中，如实记载了桓温北伐为前燕大败之事，桓温阅后大为恼怒，强令孙盛修改，孙盛誓死不从，后来是他儿子私自修改才了事。幸亏孙盛事先已将《晋阳秋》誊抄了两部寄到前燕，后人才知道这段历史的真相。</p></blockquote></li><li>本来按照周朝的制度，各诸侯国每年都必须到国都朝觐周天子并进贡各地方物，但到了春秋末年，王室衰微，周天子根本不被各诸侯放在眼里，反而要去参加诸侯的会盟。</li><li>道教中常见某人服仙丹白日羽化升天之事，实际上均是汞、砷、铅等重金属急性中毒而导致的迅速死亡。但英国著名科学史家李约瑟博士在其巨著《中国科学技术史》中就对道士炼丹活动给予了高度评价，认为中国的炼丹术通过阿拉伯人传到西方世界，发展为炼金术，成为近代化学的起源。在欧洲历史上产生了翻天覆地变化的火药，也是中国道士在炼丹过程中偶然发明的。</li><li>海瑞死时仅留下白银 20 两，尚不够殓葬的费用，可见官员们靠正常收是无法维持生活的。有的朝代还委任一些只有空衔不支俸禄的地方官，听任他们去“自负盈亏”，这样就造成了无官不贪的局面。平心而论，海瑞的廉洁自律，确实值得敬仰，但用如此崇高的道德规范来要求每一个官员，根本是不可能做到的。海瑞是宋明理学的坚定信仰者和实践者，在这点上，他确实是表里如一的，但其行事往往极端偏激而毫不近人情：明姚叔祥曾记载，海瑞年仅 5 岁的女儿，仅仅因为从男性家僮手中接了一块饼吃，便被海瑞认为犯了“男女授受不亲”不大防，强逼其自行饿死。</li><li>在中国的七大古都中，安阳建都在杭州之前，年代比杭州久；开封也先于杭州，地位更加重要，但国内外知道杭州的人无疑要比知道开封、安阳的多得多。像杭州的“宋城”主题公园，全是新建的仿古建筑，游客也源源不绝。而杭州城南凤凰山麓真正的南宋皇城遗址却堙没于草木之间，到那里去发思古之幽情的恐怕没有几个。</li><li>要了解魏晋风度就离不开《世说新语》的记载。</li><li>毛泽东晚年很多做法，他都要在历史中找根据，而与中国实际越来越脱离。1958 年，中共八届六中全会通过《关于人民公社若干问题的决议》，毛泽东将《三国志-张鲁传》亲自作注，印发与会者。他对张鲁的五斗米道实行的“置义舍”（免费住宿）、“置义米肉”（吃饭不要钱）等措施极为欣赏，在批语中认为“现在的人民公社运动，是有我国的历史来源的”，以此作为“大跃进”和“人民公社化”运动的历史依据，终于酿成历史的惨剧。毛泽东研究专家，曾任毛泽东秘书的李锐对此有过切中肯綮(qìng)的评价：“毛泽东对中国传统文化最有兴趣，涉猎最广的是史书。他一生酷好读史，到老不衰。除常看卷帙浩繁的《资治通鉴》外，即使是专治史学的专家也未必人人通读过的《二十四史》，也基本读遍了。至于稗官野史，他更是兴趣极浓，熟悉之至。”（《毛泽东晚年错误思想形成的原因》，见《直言：李锐六十年的忧与思》，今日中国出版社 1998 年）但“他既有十分高远的想象，又有丰富的历史素养，独独缺少对人类（原文按，主要是西方资本主义）经济发展普遍规律的了解，其中有为马克思所总结过的，也有马克思以后 100 多年尤其是二次大战后新发展的，他都不熟悉，或者茫然无知；同时又违背革命年代自己的经验，急于求成，不是脚踏中国实际，用科学的实事求是的态度探索落后国家社会主义建设规律，终于造成了晚年的悲剧。”（《“大跃进”失败的教训何在》，同上）</li><li>中国的三门峡水库由于无法解决的泥沙问题，建成不久即壅塞报废。</li><li>大凡在社会大变革时期，一方面许多人通过不正当的手段攫取了大量的社会财富和政治利益，另一方面，旧体制下的既得利益者出于利益丧失，对社会现状产生不满。</li><li>经济增长多半是由政府投资带动的，政府的大量投资可能造成财政赤字，往往就要依靠增发货币弥补，于是造成物价上涨。一般而言，高的经济增长率就会导致高的通货膨胀率。所以越是经济落后的地区，物价就越是出奇地低。</li><li>玄武门之变后，唐高祖随即颁布诏令，以世民为太子，建成、元吉的十个儿子均以谋反罪名处死，两个月后，又宣布退位为太上皇，李世民登基。</li><li>隋仁寿四年（604），隋文帝次子杨广发动宫廷政变，杀死其父杨坚和其兄杨勇自立，留在史书上的隋炀帝形象，是一个荒淫无耻、灭绝人伦的暴君，而导演了一场类似宫廷政变的李世民，却是大唐帝国的缔造者，是历史上少有的明君。之所以会有如此巨大的差别，就在于杨广上台后横征暴敛、诛杀功臣、穷兵黩武，不久即身死国灭，被后世视为亡国之君的典型，而李世民则能吸取历史的教训，任命包括原建成亲信魏征在内的一大批名臣，开创盛唐的“贞观之治”，自然可以从容地修改国史。</li><li>唐太宗晚年因其诸子争夺储位而极其苦恼，甚至当着大臣的面“抽佩刀欲自刺”，就是他自己种下的恶果。</li><li>整个唐朝都拥有今天越南的一部分，而当时青藏高原上的吐蕃却是唐朝的对手。</li><li>王莽深受儒家“夷夏之辨”的影响，对边疆少数民族政治采取了一系列错误政策。他胁迫羌人“献”出青海湖一带的土地设立西海郡，以便与国内已有的北海郡（国）、南海郡、东海郡合起来凑全“四海”。为了使这块荒地像一个郡，必须强制移民，于是增加了五十条法令，以便增加成千上万的罪犯，满足移民的需要。</li></ol>', 3, 0, NULL, 1, 1, 1, '2021-06-14 15:33:07', '2021-06-14 14:08:10', '葛剑雄，周筱赟著：《历史学是什么》，北京大学出版社，2015 年 9 月第 1 版。作者语：大部分的青少年，包括中小学生、非历史学及相关专业的大学生，他们学历史只是增加知识、满足兴趣、陶冶情操，既没有必要，也不应该让他们把时间花在非常琐碎的历史细节和有重大争议问题的讨论上，只要告诉他们一些基本史实或');
INSERT INTO `article` VALUES (51, 1, '常用linux命令杂记', '<p style=\"text-align: justify;\"><code>tmux</code>命令、更改 apt 源、<code>cloc</code>命令</p><h2 id=\"1-tmux\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#1-tmux\" class=\"headerlink\" title=\"1. tmux\"></a>1. tmux</h2><p style=\"text-align: justify;\">当在本地的命令行中使用 SSH 连接到远程服务器进行工作时，如果 SSH 连接突然停止，会导致远程服务器中运行的相关命令停止执行（因为 SSH 创建的进程被关闭），这意味着如果你正在服务器中进行一个长时间执行的操作，比方说训练一个神经网络，当网络意外中断、或你关闭了本地的命令行窗口，将导致该操作的运行终止，而不是继续在服务器中执行。那么如何让“连接中断时，正在执行的指令仍旧保持运行”呢，这就可以用到 tmux 命令了。</p><h3 id=\"1-1-tmux-简介\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#1-1-tmux-%E7%AE%80%E4%BB%8B\" class=\"headerlink\" title=\"1.1. tmux 简介\"></a>1.1. tmux 简介</h3><p style=\"text-align: justify;\">tmux(terminal multiplexer) 是一个终端复用器，它可以在一个窗口屏幕上创建、访问、控制多个终端。</p><ul style=\"text-align: justify;\"><li>tmux 使得“终端会话”可以从屏幕上分离出来，继续在后台运行，待后续重新连接；</li><li>tmux 还允许每个会话有多个连接窗口，因此可以多个用户实时共享会话。</li></ul><h3 id=\"1-2-session、window、pane\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#1-2-session%E3%80%81window%E3%80%81pane\" class=\"headerlink\" title=\"1.2. session、window、pane:\"></a>1.2. session、window、pane:</h3><p style=\"text-align: justify;\">tmux 中有三个重要的概念需要辨析：session、window、pane，其手册中如是说：</p><blockquote style=\"text-align: justify;\"><p>A session is a single collection of pseudo terminals under the management of tmux. Each session has one or more windows linked to it. A window occupies the entire screen and may be split into rectangular panes, each of which is a separate pseudo terminal (the pty(4) manual page documents the technical details of pseudo terminals). Any number of tmux instances may connect to the same session, and any number of windows may be present in the same session. Once all sessions are killed, tmux exits.</p><p>Each session is persistent and will survive accidental disconnection (such as ssh(1) connection timeout) or intentional detaching (with the ‘C-b d’ key strokes).</p></blockquote><p style=\"text-align: justify;\">即，一个会话(session)是一系列伪终端的集合，一个会话可以有多个窗口(window)，所谓的窗口就是日常所说的占据一块屏幕区域的窗口，每一个窗口又可以进行“分屏”，切割为若干窗格(pane)，或称之为子屏幕，对于每一个子屏幕，它也是一个独立的伪终端。</p><h3 id=\"1-2-tmux-命令\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#1-2-tmux-%E5%91%BD%E4%BB%A4\" class=\"headerlink\" title=\"1.2. tmux 命令\"></a>1.2. tmux 命令</h3><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">命令</th><th style=\"text-align: center;\">作用</th></tr></thead><tbody><tr><td style=\"text-align: center;\">tmux</td><td style=\"text-align: center;\">开启一个 tmux 会话（以数字编号为名）</td></tr><tr><td style=\"text-align: center;\">tmux new -s <session-name></session-name></td><td style=\"text-align: center;\">开启一个名为 session-name 的会话</td></tr><tr><td style=\"text-align: center;\">tmux ls</td><td style=\"text-align: center;\">查看所有存在的 tmux 会话</td></tr><tr><td style=\"text-align: center;\">tmux detach</td><td style=\"text-align: center;\">脱离当前 tmux 会话</td></tr><tr><td style=\"text-align: center;\">tmux attach -t <session-name></session-name></td><td style=\"text-align: center;\">连接名为 session-name 的会话，这里的 session-name 当然也可以为数字编号形式的名字</td></tr><tr><td style=\"text-align: center;\">tmux switch -t <session-name></session-name></td><td style=\"text-align: center;\">切换会话</td></tr><tr><td style=\"text-align: center;\">tmux rename-session -t <oldname> <newname></newname></oldname></td><td style=\"text-align: center;\">重命名会话</td></tr><tr><td style=\"text-align: center;\">tmux kill-session -t <session-name></session-name></td><td style=\"text-align: center;\">销毁会话</td></tr></tbody></table></div></div><h3 id=\"1-3-tmux-快捷键\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#1-3-tmux-%E5%BF%AB%E6%8D%B7%E9%94%AE\" class=\"headerlink\" title=\"1.3. tmux 快捷键\"></a>1.3. tmux 快捷键</h3><p style=\"text-align: justify;\">在 tmux 会话内，可使用一些快捷键替代 tmux 命令，不过要想使用快捷键，必须每次先按下前缀键<code>Ctrl + b</code>唤醒快捷键功能。</p><blockquote style=\"text-align: justify;\"><p>注意：若想脱离而不销毁会话，一定要按<code>Ctrl + b + d</code>，别按成了<code>Ctrl + d</code>，这个属于 linux 终端的快捷键，会直接退出并销毁会话。</p></blockquote><ul style=\"text-align: justify;\"><li>系统操作：</li></ul><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">快捷键</th><th style=\"text-align: center;\">功能</th></tr></thead><tbody><tr><td style=\"text-align: center;\">?</td><td style=\"text-align: center;\">列出所有快捷键</td></tr><tr><td style=\"text-align: center;\">:</td><td style=\"text-align: center;\">进入命令行模式</td></tr><tr><td style=\"text-align: center;\">[</td><td style=\"text-align: center;\">进入复制模式，此时的操作与 vim 相同</td></tr><tr><td style=\"text-align: center;\">d</td><td style=\"text-align: center;\">脱离当前会话</td></tr><tr><td style=\"text-align: center;\">D</td><td style=\"text-align: center;\">选择要脱离的会话</td></tr><tr><td style=\"text-align: center;\">r</td><td style=\"text-align: center;\">强制重绘未脱离的会话</td></tr><tr><td style=\"text-align: center;\">~</td><td style=\"text-align: center;\">列出提示信息缓存，其中包含了之前 tmux 返回的各种提示信息</td></tr><tr><td style=\"text-align: center;\"><code>Ctrl+z</code></td><td style=\"text-align: center;\">挂起当前会话</td></tr></tbody></table></div></div><ul style=\"text-align: justify;\"><li>窗口操作</li></ul><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">快捷键</th><th style=\"text-align: center;\">功能</th></tr></thead><tbody><tr><td style=\"text-align: center;\">c</td><td style=\"text-align: center;\">创建新窗口</td></tr><tr><td style=\"text-align: center;\">&amp;</td><td style=\"text-align: center;\">关闭当前窗口</td></tr><tr><td style=\"text-align: center;\">数字键</td><td style=\"text-align: center;\">切换至指定窗口</td></tr><tr><td style=\"text-align: center;\">p</td><td style=\"text-align: center;\">切换至上一窗口</td></tr><tr><td style=\"text-align: center;\">n</td><td style=\"text-align: center;\">切换至下一窗口</td></tr><tr><td style=\"text-align: center;\">l</td><td style=\"text-align: center;\">在前后两个窗口间互相切换</td></tr><tr><td style=\"text-align: center;\">w</td><td style=\"text-align: center;\">通过窗口列表切换窗口</td></tr><tr><td style=\"text-align: center;\">,</td><td style=\"text-align: center;\">重命名当前窗口</td></tr><tr><td style=\"text-align: center;\">.</td><td style=\"text-align: center;\">修改当前窗口编号，相当于窗口重新排序</td></tr><tr><td style=\"text-align: center;\">f</td><td style=\"text-align: center;\">在所有窗口中查找指定文本</td></tr></tbody></table></div></div><ul style=\"text-align: justify;\"><li>窗格操作</li></ul><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">快捷键</th><th style=\"text-align: center;\">功能</th></tr></thead><tbody><tr><td style=\"text-align: center;\">“</td><td style=\"text-align: center;\">当当前窗格上下平分为两块</td></tr><tr><td style=\"text-align: center;\">%</td><td style=\"text-align: center;\">将当前窗格左右平分为两块</td></tr><tr><td style=\"text-align: center;\">x</td><td style=\"text-align: center;\">关闭当前窗格</td></tr><tr><td style=\"text-align: center;\">!</td><td style=\"text-align: center;\">将当前面板置于新窗口</td></tr><tr><td style=\"text-align: center;\"><code>Ctrl+方向键</code></td><td style=\"text-align: center;\">以 1 个单元格为单位，移动窗格边缘</td></tr><tr><td style=\"text-align: center;\"><code>Alt+方向键</code></td><td style=\"text-align: center;\">以 5 个单元格为单位，移动窗格边缘</td></tr><tr><td style=\"text-align: center;\">q</td><td style=\"text-align: center;\">显示窗格编号</td></tr><tr><td style=\"text-align: center;\">o</td><td style=\"text-align: center;\">在当前窗格中选择下一窗格</td></tr><tr><td style=\"text-align: center;\">方向键</td><td style=\"text-align: center;\">移动光标以选择面板</td></tr><tr><td style=\"text-align: center;\">{</td><td style=\"text-align: center;\">向前置换当前面板</td></tr><tr><td style=\"text-align: center;\">}</td><td style=\"text-align: center;\">向后置换当前面板</td></tr><tr><td style=\"text-align: center;\"><code>Ctrl+o</code></td><td style=\"text-align: center;\">顺时针旋转当前窗口的面板</td></tr><tr><td style=\"text-align: center;\"><code>Alt+o</code></td><td style=\"text-align: center;\">逆时针旋转当前窗口的面板</td></tr></tbody></table></div></div><h2 id=\"2-更改-Ubuntu-的-apt-源为阿里源\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#2-%E6%9B%B4%E6%94%B9-Ubuntu-%E7%9A%84-apt-%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90\" class=\"headerlink\" title=\"2. 更改 Ubuntu 的 apt 源为阿里源\"></a>2. 更改 Ubuntu 的 apt 源为阿里源</h2><p style=\"text-align: justify;\">Ubuntu 下的包管理工具 apt 默认的软件源为国外服务器，在国内使用时经常会速度非常慢，因此可将其更换为清华源、阿里源等，只需要更改配置文件/etc/apt/sources.list 即可。</p><h3 id=\"2-1-备份原配置文件\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#2-1-%E5%A4%87%E4%BB%BD%E5%8E%9F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"2.1. 备份原配置文件\"></a>2.1. 备份原配置文件</h3><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight bash\"><div class=\"table-container\"><table class=\"layui-table\"><tbody><tr><td class=\"gutter\"><pre style=\"text-align: right;\"><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/apt/</span><br><span class=\"line\">sudo cp sources.list sources.list.backup</span><br></pre></td></tr></tbody></table></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><h3 id=\"2-2-改写-source-list-配置文件\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#2-2-%E6%94%B9%E5%86%99-source-list-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"2.2. 改写 source.list 配置文件\"></a>2.2. 改写 source.list 配置文件</h3><p style=\"text-align: justify;\">将/etc/apt/sources.list 文件的原内容全部加<code>#</code>号注释或直接删除，然后添加以下内容：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight shell\"><div class=\"table-container\"><table class=\"layui-table\"><tbody><tr><td class=\"gutter\"><pre style=\"text-align: right;\"><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></tbody></table></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><p style=\"text-align: justify;\">现在已经改写了配置文件，再执行以下命令即可完成 apt 的软件源的更新：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight bash\"><div class=\"table-container\"><table class=\"layui-table\"><tbody><tr><td class=\"gutter\"><pre style=\"text-align: right;\"><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></tbody></table></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><blockquote style=\"text-align: justify;\"><p>附：由于更新了软件源，因此一些软件被系统检测到的最新版本号可能发生变化，故而不妨再使用<code>sudo apt upgrade</code>更新一下这些软件。</p></blockquote><h3 id=\"2-3-sources-list-配置内容说明\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#2-3-sources-list-%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9%E8%AF%B4%E6%98%8E\" class=\"headerlink\" title=\"2.3. sources.list 配置内容说明\"></a>2.3. sources.list 配置内容说明</h3><p style=\"text-align: justify;\">sources.list 文件的每个配置条目都是有格式的：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight bash\"><div class=\"table-container\"><table class=\"layui-table\"><tbody><tr><td class=\"gutter\"><pre style=\"text-align: right;\"><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://site.example.com/debian distribution component1 component2 component3</span><br><span class=\"line\">deb-src http://site.example.com/debian distribution component1 component2 component3</span><br></pre></td></tr></tbody></table></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><p style=\"text-align: justify;\">其中每一行最后面的<em>componentN</em>参数表示对软件包的分类，ubuntu 下就是 main、restricted、universe、multiverse；<em>distribution</em>参数代表系统版本代号，可使用<code>lsb_release -c</code>命令查看，比如：</p><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">版本</th><th style=\"text-align: center;\">代号</th></tr></thead><tbody><tr><td style=\"text-align: center;\">Ubuntu 15.04</td><td style=\"text-align: center;\">vivid</td></tr><tr><td style=\"text-align: center;\">Ubuntu 16.04</td><td style=\"text-align: center;\">xenial</td></tr><tr><td style=\"text-align: center;\">Ubuntu 17.04</td><td style=\"text-align: center;\">zesty</td></tr><tr><td style=\"text-align: center;\">Ubuntu 18.04</td><td style=\"text-align: center;\">bionic</td></tr><tr><td style=\"text-align: center;\">Ubuntu 19.04</td><td style=\"text-align: center;\">disco</td></tr><tr><td style=\"text-align: center;\">Ubuntu 20.04</td><td style=\"text-align: center;\">focal</td></tr></tbody></table></div></div><h2 id=\"3-cloc：统计代码行数\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#3-cloc%EF%BC%9A%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0\" class=\"headerlink\" title=\"3. cloc：统计代码行数\"></a>3. cloc：统计代码行数</h2><p style=\"text-align: justify;\">当想要统计某文件夹下代码的行数时，可以使用<code>cloc</code>命令。如：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight shell\"><div class=\"table-container\"><table class=\"layui-table\"><tbody><tr><td class=\"gutter\"><pre style=\"text-align: right;\"><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cloc particle/</span></span><br><span class=\"line\"></span><br><span class=\"line\">     123 text files.</span><br><span class=\"line\">     110 unique files.</span><br><span class=\"line\">      23 files ignored.</span><br><span class=\"line\"></span><br><span class=\"line\">github.com/AlDanial/cloc v 1.82  T=0.22 s (494.5 files/s, 188728.2 lines/s)</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Language                     files          blank        comment           code</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Python                          94           4487          15174          19605</span><br><span class=\"line\">XML                              8            101            153           1023</span><br><span class=\"line\">XSD                              1             23             15            161</span><br><span class=\"line\">Bourne Shell                     1              2             36             26</span><br><span class=\"line\">Markdown                         3             12              0             22</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">SUM:                           107           4625          15378          20837</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><p><a id=\"more\" style=\"text-align: justify;\"></a><span style=\"text-align: justify;\"></span></p><h2 id=\"4-to-be-continued\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/01/15/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/#4-to-be-continued\" class=\"headerlink\" title=\"4. to be continued\"></a>4. to be continued</h2>', 6, 2, NULL, 1, 1, 1, '2021-06-14 15:33:04', '2021-06-14 14:08:51', 'tmux命令、更改 apt 源、cloc命令1. tmux当在本地的命令行中使用 SSH 连接到远程服务器进行工作时，如果 SSH 连接突然停止，会导致远程服务器中运行的相关命令停止执行（因为 SSH 创建的进程被关闭），这意味着如果你正在服务器中进行一个长时间执行的操作，比方说训练一个神经网络，当');
INSERT INTO `article` VALUES (52, 1, '代理模式——Java', '<p style=\"text-align: justify;\">最近学到 Spring 的 AOP，发现以前没搞懂的“JDK 动态代理”终于过来找茬了，所以还是细细地疏理一下吧。</p><h2 id=\"1-代理模式\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#1-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"1. 代理模式\"></a>1. 代理模式</h2><p style=\"text-align: justify;\">碰见一个新概念，第一要做的还是要“顾名思义”：模式二字自不必说，所谓“代理”，即当某个目标对象不能被直接使用时，给这个目标对象提供一个“代办人”（代天行道），以便代替目标对象发挥其本来的功能。当然，在这个过程中“代理对象”通常会对“目标对象”进行一些改造升级，而不是单纯的复制。</p><p style=\"text-align: justify;\">另一方面，从行为表现上来说，代理其实也可想像为“接口”和“实现类”的关系：接口就是目标对象，相应的实现类就是接口的代理。在 Java 中不能创建接口的实例，而只能创建实现这个接口的类的实例，所以“接口”这个概念虽然不是为代理模式而生的，但它天然就是代理的模式。类似的，其实也可想像为类继承中“基类”和“子类”的关系。</p><p style=\"text-align: justify;\">对于 Java 来说，代理模式在代码实现上可以分为<span>静态代理</span>和<span>动态代理</span>。</p><h2 id=\"2-静态代理\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#2-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86\" class=\"headerlink\" title=\"2. 静态代理\"></a>2. 静态代理</h2><p style=\"text-align: justify;\">静态代理其实没啥好说的，实际就是通常写代码的方式，将代理对象直接在代码中显示构造出来：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight java\"><div class=\"table-container\"><pre style=\"text-align: start;\"><span class=\"line\">// 目标对象/目标类/被代理类</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要编写实现类，即“代理类”</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Turtle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am an animal, named turtle.\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">// proxyAnimal是Turtle类的实例，但在Java中可自动向上转型为Animal接口</span></span><br><span class=\"line\">        <span class=\"comment\">// 故而可以说proxyAnimal为Animal的代理</span></span><br><span class=\"line\">        Animal proxyAnimal = <span class=\"keyword\">new</span> Turtle(); <span class=\"comment\">// 显示构造出代理对象proxyAnimal</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的info方法</span></span><br><span class=\"line\">        proxyAnimal.info();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span></pre></div></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><h2 id=\"3-动态代理\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#3-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\" class=\"headerlink\" title=\"3. 动态代理\"></a>3. 动态代理</h2><h3 id=\"3-1-JDK-代理\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#3-1-JDK-%E4%BB%A3%E7%90%86\" class=\"headerlink\" title=\"3.1. JDK 代理\"></a>3.1. JDK 代理</h3><p style=\"text-align: justify;\">Java 标准库提供了一种动态代理的机制：可以在运行期动态创建某个<span>接口</span>的实例，也即为这个接口创建代理对象。</p><p style=\"text-align: justify;\">具体地，java.lang.reflect 包下提供了一个<code>Proxy</code>类和一个<code>InvocationHandler</code>接口，Java 利用它们生成 JDK&nbsp;<span>动态代理类</span>或<span>动态代理对象</span>，如：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight java\"><pre style=\"text-align: start;\"><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">// 目标对象/目标类/被代理类</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">// 需要先定义一个InvocationHandler类型的handler，其处理（改造）目标对象的每个方法</span></span><br><span class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> InvocationHandler() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>{</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"I am an animal, named turtle.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        };</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 直接生成动态代理对象</span></span><br><span class=\"line\">        Animal proxyAnimal = (Animal) Proxy.newProxyInstance(</span><br><span class=\"line\">                Animal.class.getClassLoader(), <span class=\"comment\">// 接口实现类（即代理对象所属类）的类加载器</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]{Animal.class}, <span class=\"comment\">// 代理类要实现的接口（们）</span></span><br><span class=\"line\">                handler); <span class=\"comment\">// 改造目标对象方法的InvocationHandler实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的info方法</span></span><br><span class=\"line\">        proxyAnimal.info();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span></pre></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><p style=\"text-align: justify;\">总结而言，创建 JDK 动态代理对象的过程如下：</p><ul style=\"text-align: justify;\"><li><p>定义一个<code>InvocationHandler</code>实例，它负责实现接口（即被代理的目标）的方法调用；</p><blockquote><p><code>InvocationHandler</code>本身也是一个接口，需要定义它的实现类，其中需要重写<code>invoke()</code>方法。调用代理对象的所有方法时都会被替换成调用该<code>invoke()</code>方法，其函数签名为：<code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable</code></p></blockquote></li></ul><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">参数</th><th style=\"text-align: center;\">解释</th></tr></thead><tbody><tr><td style=\"text-align: center;\">proxy</td><td style=\"text-align: center;\">代表动态代理对象</td></tr><tr><td style=\"text-align: center;\">method</td><td style=\"text-align: center;\">代表正在执行的方法</td></tr><tr><td style=\"text-align: center;\">args</td><td style=\"text-align: center;\">代表调用目标方法时传入的实参</td></tr></tbody></table></div></div><ul style=\"text-align: justify;\"><li><p>通过<code>Proxy.newProxyInstance()</code>创建 interface 实例；</p><blockquote><p>其函数签名为<code>static Object newProxyInstance(ClassLoader loader, Class<!--?-->[] interfaces, InvocationHandler handler)</code>，它需要 3 个参数：</p></blockquote></li></ul><div class=\"table-container\" style=\"text-align: justify;\"><div class=\"table-container\"><table class=\"layui-table\"><thead><tr><th style=\"text-align: center;\">参数</th><th style=\"text-align: center;\">解释</th></tr></thead><tbody><tr><td style=\"text-align: center;\">loader</td><td style=\"text-align: center;\">定义这个代理类的类加载器（通常就是接口类的 ClassLoader）</td></tr><tr><td style=\"text-align: center;\">interfaces</td><td style=\"text-align: center;\">代理类将要实现的接口数组（至少需要传入一个接口进去）</td></tr><tr><td style=\"text-align: center;\">h</td><td style=\"text-align: center;\">用来处理接口方法调用的 InvocationHandler 实例</td></tr></tbody></table></div></div><ul style=\"text-align: justify;\"><li>将<code>Proxy.newProxyInstance()</code>返回的 Object 强制转型为接口。</li></ul><p style=\"text-align: justify;\">除直接创建动态代理对象外，Java 还可先创建动态代理类，而后通过动态代理类再创建动态代理对象，此时调用的是<code>Proxy.getProxyClass()</code>方法，其完整函数签名为<code>static Class<!--?--> getProxyClass(ClassLoader loader, Class<!--?-->... interfaces)</code>，形参含义同上。不过，即使采用这种方式生成动态代理类之后，如果程序需要通过该代理类来创建对象，依然需要传入一个<code>InvocationHandler</code>对象。</p><h3 id=\"3-2-cglib-代理\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#3-2-cglib-%E4%BB%A3%E7%90%86\" class=\"headerlink\" title=\"3.2. cglib 代理\"></a>3.2. cglib 代理</h3><p style=\"text-align: justify;\">cglib 代理不依赖于接口，而是基于基类/子类。暂略……</p><h2 id=\"4-动态代理的优势应用\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#4-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BA%94%E7%94%A8\" class=\"headerlink\" title=\"4. 动态代理的优势应用\"></a>4. 动态代理的优势应用</h2><p style=\"text-align: justify;\">仅看上面定义式的描述，实在很难看出动态代理的优势，而实际上动态代理在解耦方面具有重要应用。例如：</p><h3 id=\"4-1-解耦合\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#4-1-%E8%A7%A3%E8%80%A6%E5%90%88\" class=\"headerlink\" title=\"4.1. 解耦合\"></a>4.1. 解耦合</h3><p style=\"text-align: justify;\">对于如下图 18.4 的软件系统，工程中出现大量重复代码段是相当糟糕的情况，大部分<span>稍</span>有经验的开发者都会将其中深色代码段定义成一个方法，然后让另外三段代码段直接调用该方法即可，如下图 18.5。</p><p style=\"text-align: justify;\"><img src=\"https://chua-n.gitee.io/blog-images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/1.png\" alt=\"图 18.4\"><br><img src=\"https://chua-n.gitee.io/blog-images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/2.png\" alt=\"图 18.5\"></p><p style=\"text-align: justify;\">然而，采用这种方式来实现代码复用依然产生一个重要问题：代码段 1、代码段 2、代码段 3 和深色代码段分离开了，但代码段 1、代码段 2、代码段 3 又和一个特定方法耦合了！最理想的效果是：代码段 1、2、3 既可以执行深色代码部分，又无须在程序中以硬编码方式直接调用深色代码的方法，这时就可以通过动态代理来达到这种解耦效果。如下面的代码，一些重要的理念也包含在注释中：</p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight java\"><pre style=\"text-align: start;\"><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于JDK动态代理只能为接口创建动态代理，所以先提供一个Dog接口</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dog</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于接口不可能提供实现，如果直接使用Proxy为Dog接口创建动态代理对象，</span><br><span class=\"line\">// 那动态代理对象的所有方法的执行效果又将完全一样，故而实际情况通常是：</span><br><span class=\"line\">// 该Dog接口总会提供一个/多个实现类，比如这里的GunDog类</span><br><span class=\"line\">// 此类中定义两个方法来代表上述所谓的代码段1、代码段2，目标是希望这两段代码能够跟某个公共代码松耦合</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GunDog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dog</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是一只猎狗\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我奔跑迅速\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义通用方法，即代码段1、2的公共代码段</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DogUtil</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 第一个拦截器方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------模拟通用方法1---------\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二个拦截器方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------模拟通用方法2---------\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 程序的关键</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 需要被代理的目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTarget</span><span class=\"params\">(Object target)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke()方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Exception </span>{</span><br><span class=\"line\">        DogUtil du = <span class=\"keyword\">new</span> DogUtil();</span><br><span class=\"line\">        du.method1();</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射以target作为主调来执行method方法</span></span><br><span class=\"line\">        Object result = method.invoke(target, args); <span class=\"comment\">// 关键</span></span><br><span class=\"line\">        du.method2();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 提供一个代理工厂类，专门为指定的target生成动态代理实例</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyProxyFactory</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getProxy</span><span class=\"params\">(Object target)</span> </span>{</span><br><span class=\"line\">        MyInvocationHandler handler = <span class=\"keyword\">new</span> MyInvocationHandler();</span><br><span class=\"line\">        handler.setTarget(target);</span><br><span class=\"line\">        <span class=\"comment\">// 创建并返回一个target的动态代码对象，它与target实现了相同的接口</span></span><br><span class=\"line\">        <span class=\"comment\">// 故而动态代理对象可以当作target对象使用，即实现了对target对象的代理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                handler</span><br><span class=\"line\">        );</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxyTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个原始的GunDog对象，作为target</span></span><br><span class=\"line\">        Dog target = <span class=\"keyword\">new</span> GunDog();</span><br><span class=\"line\">        <span class=\"comment\">// 以指定的target来创建动态代理对象</span></span><br><span class=\"line\">        Dog dog = (Dog) MyProxyFactory.getProxy(target);</span><br><span class=\"line\">        <span class=\"comment\">// info()和run()两个代码段既实现了对method1()、method2()通用方法的插入</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时在这两个代码段的定义代码——GunDog类的两个方法——中，又没有以硬编码方式调用method1()、method2()方法</span></span><br><span class=\"line\">        dog.info();</span><br><span class=\"line\">        dog.run();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span></pre></figure><div class=\"copy-btn\"><span class=\"fa fa-clipboard fa-fw\" style=\"text-align: center;\"></span></div></div><h3 id=\"4-2-已有方法的动态增强\" style=\"text-align: justify;\"><a href=\"https://www.chua-n.com/2021/02/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/#4-2-%E5%B7%B2%E6%9C%89%E6%96%B9%E6%B3%95%E7%9A%84%E5%8A%A8%E6%80%81%E5%A2%9E%E5%BC%BA\" class=\"headerlink\" title=\"4.2. 已有方法的动态增强\"></a>4.2. 已有方法的动态增强</h3><p><a id=\"more\" style=\"text-align: justify;\"></a><span style=\"text-align: justify;\"></span></p><div class=\"highlight-container\" style=\"text-align: justify;\"><figure class=\"highlight java\"><pre style=\"text-align: start;\"><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TargetInterface</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title\">TargetInterface</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"save running...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 增强代码</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Advice</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置增强......\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置增强......\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Target target = <span class=\"keyword\">new</span> Target(); <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">        Advice advice = <span class=\"keyword\">new</span> Advice(); <span class=\"comment\">// 增强对象</span></span><br><span class=\"line\">        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(), <span class=\"comment\">// 目标对象的类加载器</span></span><br><span class=\"line\">                target.getClass().getInterfaces(), <span class=\"comment\">// 目标对象相同的接口字节码对象数组</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvocationHandler() {</span><br><span class=\"line\">                    <span class=\"comment\">// 调用代理对象的任何方法，实质执行的都是invoke方法</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>{</span><br><span class=\"line\">                        advice.before();</span><br><span class=\"line\">                        method.invoke(target, args);</span><br><span class=\"line\">                        advice.afterReturning();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">        );</span><br><span class=\"line\">        proxy.save();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span></pre></figure></div>', 16, 1, NULL, 1, 1, 1, '2021-06-14 15:33:00', '2021-06-14 14:11:27', '最近学到 Spring 的 AOP，发现以前没搞懂的“JDK 动态代理”终于过来找茬了，所以还是细细地疏理一下吧。1. 代理模式碰见一个新概念，第一要做的还是要“顾名思义”：模式二字自不必说，所谓“代理”，即当某个目标对象不能被直接使用时，给这个目标对象提供一个“代办人”（代天行道），以便代替目标对');
INSERT INTO `article` VALUES (53, 2, '走啊走，走啊走', '<p style=\"text-align: justify;\">走啊走，走啊走，<br>依依别离家乡柳；<br>走啊走，走啊走，<br>依依别离家乡柳。</p><p style=\"text-align: justify;\">披星戴月，食风饮露，<br>苦海无边甘承受，<br>人生贵在有追求，<br>哪怕脚下路悠悠。</p><p style=\"text-align: justify;\">披星戴月，食风饮露，<br>苦海无边甘承受，<br>人生贵在有追求，<br>哪怕脚下路悠悠。</p><p style=\"text-align: justify;\">走啊走，走啊走，<br>走啊走，走啊走，<br>走啊走，走啊走，<br>走啊走，走啊走，<br>走……啊……走……</p>', 17, 0, NULL, 1, 1, 1, '2021-06-14 15:32:53', '2021-06-14 14:41:41', '走啊走，走啊走，依依别离家乡柳；走啊走，走啊走，依依别离家乡柳。披星戴月，食风饮露，苦海无边甘承受，人生贵在有追求，哪怕脚下路悠悠。披星戴月，食风饮露，苦海无边甘承受，人生贵在有追求，哪怕脚下路悠悠。走啊走，走啊走，走啊走，走啊走，走啊走，走啊走，走啊走，走啊走，走……啊……走……');

-- ----------------------------
-- Table structure for article_category_ref
-- ----------------------------
DROP TABLE IF EXISTS `article_category_ref`;
CREATE TABLE `article_category_ref`  (
  `article_id` int NOT NULL COMMENT '文章ID',
  `category_id` int NOT NULL COMMENT '分类ID',
  PRIMARY KEY (`article_id`, `category_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_category_ref
-- ----------------------------
INSERT INTO `article_category_ref` VALUES (50, 100000013);
INSERT INTO `article_category_ref` VALUES (50, 100000014);
INSERT INTO `article_category_ref` VALUES (51, 100000011);
INSERT INTO `article_category_ref` VALUES (51, 100000016);
INSERT INTO `article_category_ref` VALUES (52, 100000009);
INSERT INTO `article_category_ref` VALUES (52, 100000015);
INSERT INTO `article_category_ref` VALUES (53, 100000014);
INSERT INTO `article_category_ref` VALUES (53, 100000017);

-- ----------------------------
-- Table structure for article_tag_ref
-- ----------------------------
DROP TABLE IF EXISTS `article_tag_ref`;
CREATE TABLE `article_tag_ref`  (
  `article_id` int NOT NULL COMMENT '文章ID',
  `tag_id` int NOT NULL COMMENT '标签ID',
  PRIMARY KEY (`article_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_tag_ref
-- ----------------------------
INSERT INTO `article_tag_ref` VALUES (50, 41);
INSERT INTO `article_tag_ref` VALUES (51, 40);
INSERT INTO `article_tag_ref` VALUES (52, 40);
INSERT INTO `article_tag_ref` VALUES (53, 41);

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `category_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '分类ID',
  `category_pid` int NULL DEFAULT NULL COMMENT '分类父ID',
  `category_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分类名称',
  `category_description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `category_order` int UNSIGNED NULL DEFAULT 1 COMMENT '排序值',
  `category_icon` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图标',
  PRIMARY KEY (`category_id`) USING BTREE,
  UNIQUE INDEX `category_name`(`category_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 100000018 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (100000009, 0, 'java', '', NULL, '');
INSERT INTO `category` VALUES (100000010, 0, 'python', '', NULL, '');
INSERT INTO `category` VALUES (100000011, 100000016, 'linux', '', NULL, '');
INSERT INTO `category` VALUES (100000012, 0, '数学', '', NULL, '');
INSERT INTO `category` VALUES (100000013, 100000014, '历史', '', NULL, '');
INSERT INTO `category` VALUES (100000014, 0, '杂记', '', NULL, '');
INSERT INTO `category` VALUES (100000015, 100000009, 'java基础', '', NULL, '');
INSERT INTO `category` VALUES (100000016, 0, 'OS', '', NULL, '');
INSERT INTO `category` VALUES (100000017, 100000014, '随想', '', NULL, '');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `comment_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '评论ID',
  `comment_pid` int UNSIGNED NULL DEFAULT 0 COMMENT '上级评论ID',
  `comment_pname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '上级评论名称',
  `comment_article_id` int UNSIGNED NOT NULL COMMENT '文章ID',
  `comment_author_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论人名称',
  `comment_author_email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论人邮箱',
  `comment_author_url` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论人个人主页',
  `comment_author_avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '评论人头像',
  `comment_content` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '内容',
  `comment_agent` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '浏览器信息',
  `comment_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'IP',
  `comment_create_time` datetime NULL DEFAULT NULL COMMENT '评论时间',
  `comment_role` int NULL DEFAULT NULL COMMENT '角色，是否管理员',
  `comment_user_id` int NULL DEFAULT NULL COMMENT '评论ID,可能为空',
  PRIMARY KEY (`comment_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (47, 0, '', 52, '荒流', 'admin@ssmblog.com', '', 'http://cn.gravatar.com/avatar/null?s=128&d=identicon&r=PG', '为啥添加了分类却显示没有类别？？？', NULL, '0:0:0:0:0:0:0:1', '2021-06-14 14:22:26', 1, 1);
INSERT INTO `comment` VALUES (48, 0, '', 51, '张三', 'zhangsan@ssmblog.com', '', 'http://cn.gravatar.com/avatar/null?s=128&d=identicon&r=PG', '进来文章页面的时候还是会有“获取数据出错！”', NULL, '0:0:0:0:0:0:0:1', '2021-06-14 14:42:16', 0, 2);
INSERT INTO `comment` VALUES (49, 48, '张三', 51, '荒流', 'admin@ssmblog.com', '', NULL, '晓得了，这是个问题。', NULL, '0:0:0:0:0:0:0:1', '2021-06-14 14:43:05', 1, NULL);

-- ----------------------------
-- Table structure for link
-- ----------------------------
DROP TABLE IF EXISTS `link`;
CREATE TABLE `link`  (
  `link_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '链接ID',
  `link_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'URL',
  `link_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '姓名',
  `link_image` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `link_description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `link_owner_nickname` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属人名称',
  `link_owner_contact` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '联系方式',
  `link_update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `link_create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `link_order` int UNSIGNED NULL DEFAULT 1 COMMENT '排序号',
  `link_status` int UNSIGNED NULL DEFAULT 1 COMMENT '状态',
  PRIMARY KEY (`link_id`) USING BTREE,
  UNIQUE INDEX `link_name`(`link_name`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of link
-- ----------------------------
INSERT INTO `link` VALUES (4, 'https://github.com/chua-n', 'GitHub', NULL, '', NULL, '', '2021-06-14 10:50:09', '2021-03-19 18:02:31', 1, 1);
INSERT INTO `link` VALUES (10, 'www.chua-n.com', '博客', NULL, '', NULL, '', '2021-06-14 10:50:57', '2021-06-14 10:50:57', NULL, 1);

-- ----------------------------
-- Table structure for menu
-- ----------------------------
DROP TABLE IF EXISTS `menu`;
CREATE TABLE `menu`  (
  `menu_id` int NOT NULL AUTO_INCREMENT COMMENT '菜单ID',
  `menu_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '名称',
  `menu_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'URL',
  `menu_level` int NULL DEFAULT NULL COMMENT '等级',
  `menu_icon` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图标',
  `menu_order` int NULL DEFAULT NULL COMMENT '排序值',
  PRIMARY KEY (`menu_id`) USING BTREE,
  UNIQUE INDEX `menu_name`(`menu_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of menu
-- ----------------------------
INSERT INTO `menu` VALUES (1, '留言板', '/message', 2, 'fa fa-comment', 1);
INSERT INTO `menu` VALUES (2, 'LeetCode', 'https://leetcode.com/problemset/all', 2, 'ssss', 3);
INSERT INTO `menu` VALUES (3, '关于本站', '/aboutSite', 1, 'fa fa-info', 1);
INSERT INTO `menu` VALUES (4, '文章归档', '/articleFile', 1, 'fa-list-alt fa', 2);
INSERT INTO `menu` VALUES (5, '申请友链', '/applyLink', 1, 'fa fa-link', 3);

-- ----------------------------
-- Table structure for notice
-- ----------------------------
DROP TABLE IF EXISTS `notice`;
CREATE TABLE `notice`  (
  `notice_id` int NOT NULL AUTO_INCREMENT COMMENT '公告ID',
  `notice_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '公告标题',
  `notice_content` varchar(10000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '内容',
  `notice_create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `notice_update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `notice_status` int UNSIGNED NULL DEFAULT 1 COMMENT '状态',
  `notice_order` int NULL DEFAULT NULL COMMENT '排序值',
  PRIMARY KEY (`notice_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of notice
-- ----------------------------
INSERT INTO `notice` VALUES (4, '欢迎光临', '<p>欢迎诸位莅临本站，也欢迎各位提出各种Bug反馈、改进意见！</p>', '2018-05-26 20:40:50', '2021-06-14 10:54:50', 1, 1);
INSERT INTO `notice` VALUES (6, '建站说明明', '本站是本人第一个SSM项目训练尝试，使用的GitHub热门项目ForestBlog。', '2021-06-14 10:56:06', '2021-06-14 10:56:06', 1, 1);

-- ----------------------------
-- Table structure for options
-- ----------------------------
DROP TABLE IF EXISTS `options`;
CREATE TABLE `options`  (
  `option_id` int NOT NULL,
  `option_site_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_site_descrption` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_meta_descrption` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_meta_keyword` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_wechat` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_qq` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_github` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_aboutsite_weibo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_tongji` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `option_status` int NULL DEFAULT 1,
  PRIMARY KEY (`option_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of options
-- ----------------------------
INSERT INTO `options` VALUES (1, '这里是川', '', '', '', '/uploads/2021\\6/avatar.png', '荒流', '', '/uploads/2021\\6/校微.jpg', '', '', '', NULL, 1);

-- ----------------------------
-- Table structure for page
-- ----------------------------
DROP TABLE IF EXISTS `page`;
CREATE TABLE `page`  (
  `page_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '自定义页面ID',
  `page_key` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'key',
  `page_title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `page_content` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '内容',
  `page_create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `page_update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `page_view_count` int UNSIGNED NULL DEFAULT 0 COMMENT '访问量',
  `page_comment_count` int UNSIGNED NULL DEFAULT 0 COMMENT '评论数',
  `page_status` int UNSIGNED NULL DEFAULT 1 COMMENT '状态',
  PRIMARY KEY (`page_id`) USING BTREE,
  UNIQUE INDEX `page_key`(`page_key`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of page
-- ----------------------------
INSERT INTO `page` VALUES (1, 'map', '站点地图', NULL, NULL, NULL, 0, 0, 2);
INSERT INTO `page` VALUES (2, 'articleFile', '文章归档', NULL, NULL, NULL, 0, 0, 2);
INSERT INTO `page` VALUES (3, 'message', '留言板', NULL, NULL, NULL, 0, 0, 2);
INSERT INTO `page` VALUES (4, 'applyLink', '申请友链', NULL, NULL, NULL, 0, 0, 2);
INSERT INTO `page` VALUES (5, 'aboutSite', '关于本站', '<h2>关于项目</h2><p>该项目是博主暑假粗略学完&nbsp;<a href=\"https://liuyanzhao.com/tag/ssm/\" title=\"查看与 SSM 相关的文章\" target=\"_blank\">SSM</a>（Spring+SpringMVC+Mybatis）后，开始着手做的一个博客系统。<br>主要涉及的包括 JSP，JSTL，EL表达式，MySQL，Druid连接池，Spring，SpringMVC，MyBatis 等。<br>前端采用Layui框架和扒了一个[网站](http://liuyanzhao.com)的前台样式。通过Maven管理依赖。</p><h2>效果预览</h2><p>预览地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.liuyanzhao.com\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.liuyanzhao.com</a></p><p>前台效果图<br><img class=\"alignnone size-large wp-image-6348\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"608\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-300x178.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-768x456.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>后台效果图<br><img class=\"alignnone size-large wp-image-6349\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"611\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-300x179.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-768x458.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>&nbsp;</p><p><span>后台地址：/admin 或者 /login</span></p><p><span>用户名为admin，密码为123456</span></p><p>&nbsp;</p><h2>使用注意</h2><p><strong>1、使用IDE导入项目</strong></p><p>将项目即（ForestBlog文件夹）放到 某个位置，用IDE(如Eclipse，IntelliJ IDEA)导入，然后可以在IDE里运行 Tomcat，访问项目。</p><p>因为该项目使用了`Maven`，所有你需要新的IDE需要有Maven插件或者功能，这里就不多介绍了。</p><p><img class=\"size-large wp-image-6350 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"517\" height=\"1024\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg 517w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-151x300.jpg 151w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog.jpg 681w\" sizes=\"(max-width: 517px) 100vw, 517px\"></p><p><strong>2、 导入数据库</strong></p><p>新建数据库 `forest_blog`，导入数据库（即forest_blog.sql）。注意，数据库的编码和排序规则是utf-8和utf-8_general_ci</p><p><img class=\"size-full wp-image-6352 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"400\" height=\"540\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg 400w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2-222x300.jpg 222w\" sizes=\"(max-width: 400px) 100vw, 400px\"></p><p><strong>3、修改项目中的数据库连接信息</strong></p><p>修改&nbsp;`db.properties` 文件，该文件很容易找到，在 src/main/resources 中，注意修改数据库地址、表名、用户名和密码。</p><p><span><strong>如果不修改，会出现无法启动项目</strong></span></p><p>&nbsp;</p><p><strong>4、修改上传文件路径</strong></p><p>该项目中，文件上传是传到本地，且和项目文件夹不在一起，就是说是分离的。比如你的项目是在D盘，你可以修改上传路径到E盘。当然我们访问上传的图片时，需要 &nbsp; 给Tomcat添加静态资源映射，比如访问 localhost:8080/uplaods/1.jpg tomcat可以在你的E盘找到。这个在第5步会说。</p><p>现在是修改上传文件路径，该文件在 src/main/java/com/liuyanzhao/blog/controller/Common/UploadFileController.java</p><p>修改第33行的 `String rootPath =\"/www/uploads/\";` 为你的 uploads 的路径。</p><p><span><strong>如果不修改，会出现无法上传图片</strong></span></p><p>&nbsp;</p><p><strong>5、给uploads文件夹添加静态资源映射</strong></p><p>同第4步，我们已经修改了uploads路径，该路径就要和下面的docBase一致。<br>在 tomcat/conf/server.xml 的 Host 标签内添加如下代码</p><div class=\"dp-highlighter\"><ol class=\"dp-j\" start=\"1\"><li class=\"alt\">&lt;Context&nbsp;path=<span class=\"string\">\"/uploads\"</span>&nbsp;docBase=<span class=\"string\">\"/www/uploads\"</span>&nbsp;debug=<span class=\"string\">\"0\"</span>&nbsp;reloadable=<span class=\"string\">\"true\"</span>&nbsp;/&gt;</li></ol></div><p>对啦，如果你使用的是IDE，需要在该IDE里修改。</p><p>比如 IntelliJ IDEA 是在Tomcat配置中添加</p><p><img class=\"alignnone size-large wp-image-6354\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"181\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-300x53.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-768x136.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4.jpg 1426w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p><span><strong>如果不修改，会出现uploads的图片无法加载，网页打开有延迟</strong></span></p><p>&nbsp;</p><p><strong>6、修改 Tomcat的首页为该项目</strong></p><p>跟第5步相似</p><p>该项目中的所有根路径都是 / ，没有使用相对路径的 `${pagecontext.request.getcontextpath}` ,因为如何相对路径不存在，该值就会为空字符串，以致 &nbsp; 首页链接我必须改为 / 。<br>所以，你的项目首页应该是 localhost:8080，而不是loclahost:8080/ForestBlog</p><p>所以要在 server.xml 的Host标签内里添加</p><div class=\"dp-highlighter\"><ol class=\"dp-j\" start=\"1\"><li class=\"alt\">&lt;Context&nbsp;path=<span class=\"string\">\"\"</span>&nbsp;docBase=<span class=\"string\">\"/www/server/panel/vhost/tomcat/ForestBlog\"</span>&nbsp;debug=<span class=\"string\">\"0\"</span>&nbsp;reloadable=<span class=\"string\">\"true\"</span>&nbsp;/&gt;</li></ol></div><p>其中path=\"\"表示为首页,即localhost:8080或者127.0.0.1：8080<br>docBase-\"xxx\"是文件路径</p><p><img class=\"size-large wp-image-6355 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"134\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-300x39.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-768x101.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5.jpg 1570w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>对啦，如果你使用的是IDE，需要在该IDE里修改。</p><p>比如 IntelliJ IDEA 是在Tomcat配置中添加</p><p><img class=\"alignnone size-large wp-image-6353\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"321\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-300x94.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-768x241.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3.jpg 1428w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p><span><strong>如果不修改，会出现内页很多链接不对</strong></span></p><p>&nbsp;</p><h2>下载地址：</h2><p>Github地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/ForestBlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/saysky/ForestBlog</a></p><p><em>（如果可以帮忙点一次Star和Fork）</em></p><p>&nbsp;</p><h2>更新</h2><p>上一次更新：2017年10月10日14:02:02</p>', '2017-10-06 23:40:35', '2017-10-10 14:58:12', NULL, NULL, 1);
INSERT INTO `page` VALUES (7, 'hello', '测试页面', '这是在测试页面啊！！！', '2018-12-21 21:46:50', '2021-06-14 10:02:36', NULL, NULL, 1);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `tag_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '标签ID',
  `tag_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标签名称',
  `tag_description` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  PRIMARY KEY (`tag_id`) USING BTREE,
  UNIQUE INDEX `tag_name`(`tag_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 42 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (40, 'coding', '');
INSERT INTO `tag` VALUES (41, '生活', '');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `user_id` int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `user_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '用户名',
  `user_pass` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '密码',
  `user_nickname` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '昵称',
  `user_email` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '邮箱',
  `user_url` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '个人主页',
  `user_avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `user_last_login_ip` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '上传登录IP',
  `user_register_time` datetime NULL DEFAULT NULL COMMENT '注册时间',
  `user_last_login_time` datetime NULL DEFAULT NULL COMMENT '上传登录时间',
  `user_status` int UNSIGNED NULL DEFAULT 1 COMMENT '状态',
  `user_role` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'user' COMMENT '角色',
  PRIMARY KEY (`user_id`) USING BTREE,
  UNIQUE INDEX `user_name`(`user_name`) USING BTREE,
  UNIQUE INDEX `user_email`(`user_email`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, 'admin', '123456', '荒流', 'admin@ssmblog.com', '', '/img/avatar/avatar1.jpg', '0:0:0:0:0:0:0:1', '2017-10-06 21:56:33', '2021-06-14 23:05:39', 1, 'admin');
INSERT INTO `user` VALUES (5, 'WangWu', '123456', '王五', 'wangwu@ssmblog.com', '', '/img/avatar/avatar.png', '0:0:0:0:0:0:0:1', '2021-02-25 09:12:33', '2021-02-25 09:13:57', 1, 'user');
INSERT INTO `user` VALUES (2, 'ZhangSan', '123456', '张三', 'zhangsan@ssmblog.com', '', '/img/avatar/avatar2.jpeg', '0:0:0:0:0:0:0:1', '2018-11-25 14:45:08', '2021-06-14 14:40:30', 1, 'user');
INSERT INTO `user` VALUES (4, 'LiSi', '123456', '李四', 'lisi@ssmblog.com', '', '/img/avatar/avatar.png', NULL, '2021-02-25 09:11:42', NULL, 1, 'user');

SET FOREIGN_KEY_CHECKS = 1;
